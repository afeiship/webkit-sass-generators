/*padding Start*/
$padding-map:(
  p:padding,
  pt:padding-top,
  pr:padding-right,
  pb:padding-bottom,
  pl:padding-left,
  px:(padding-left,padding-right),
  py:(padding-top,padding-bottom)
);

@mixin generator-padding($inList,$inDirection:'p',$inPrefix:''){
  $mapValue:map_get($padding-map,$inDirection);
  $typeof:type-of($mapValue);


  @if $typeof =='string'{
    .#{$inDirection}#{$inPrefix} {
      @each $i in $inList{
        &#{$i}{
          #{$mapValue}:#{$i}px;
        }
      }
    }
  }@else{
    .#{$inDirection}#{$inPrefix} {
      @each $i in $inList{
        &#{$i}{
          //mapValue is a `list`
          @each $mapItem in $mapValue{
            #{$mapItem}:#{$i}px;
          }
        }
      }
    }
  }
}

@mixin generator-padding-p($inList,$inPrefix){
  @include generator-padding($inList,'p',$inPrefix:'');
}

@mixin generator-padding-pt($inList,$inPrefix){
  @include generator-padding($inList,'pt',$inPrefix:'');
}

@mixin generator-padding-pr($inList,$inPrefix){
  @include generator-padding($inList,'pr',$inPrefix:'');
}

@mixin generator-padding-pb($inList,$inPrefix){
  @include generator-padding($inList,'pb',$inPrefix:'');
}

@mixin generator-padding-pl($inList,$inPrefix){
  @include generator-padding($inList,'pl',$inPrefix:'');
}

@mixin generator-padding-px($inList,$inPrefix){
  @include generator-padding($inList,'px',$inPrefix:'');
}

@mixin generator-padding-py($inList,$inPrefix){
  @include generator-padding($inList,'py',$inPrefix:'');
}


/*padding End*/
