/*color Start*/
@mixin generator-border-color($inMap,$inPrefix:'.bdc-'){
  @each $name,$color in $inMap{
    #{$inPrefix}#{$name}{
      border-color:#{$color};
    }
  }
}
/*color End*/

/*blank Start*/
.blank {
  display: block;
  font-size: 0;
  overflow: hidden;
  clear: both;
}

@mixin generator-blank($inList,$inPrefix:'.blank-'){
  #{$inPrefix} {
    @each $i in $inList{
      &#{$i}{
        height:#{$i}px;
        @extend .blank;
      }
    }
  }
}


/*blank End*/

/*background-color Start*/
@mixin generator-background-color($inMap,$inPrefix:'.bg-'){
  @each $name,$color in $inMap{
    #{$inPrefix}#{$name}{
      background-color:#{$color};
    }
  }
}
/*background-color End*/

/*border-radius Start*/
@mixin generator-border-radius($inList,$inPrefix:'.bdr-'){
  #{$inPrefix} {
    @each $i in $inList{
      &#{$i}{
        border-radius: #{$i}px;
      }
    }
  }
}
/*border-radius End*/

/*color Start*/
@mixin generator-color($inMap,$inPrefix:'.c-'){
  @each $name,$color in $inMap{
    #{$inPrefix}#{$name}{
      color:#{$color};
    }
  }
}
/*color End*/

/*data Start*/
@function generator-list( $from:0, $to:9 ) {
  $list: ();
  @for $i from $from through $to {
    $list: append($list, $i);
  }
  @return $list;
}
/*data End*/

/*font-size Start*/
@mixin generator-font-size($inList,$inPrefix:'.f-'){
  #{$inPrefix} {
    @each $i in $inList{
      &#{$i}{
        font-size:#{$i}px;
      }
    }
  }
}
/*font-size End*/

/*grid Start*/
.dib-col{
  width: 100%;
  display: inline-block;
  font-size: 16px;
}
@mixin dib-row () {
  font-size: 0;
}
// This is column mixins.
@mixin dib-col ($col, $sum, $gap: 1em, $align: top, $first: false, $last: false) {
  padding-left: if($first, 0, $gap);
  padding-right: if($last, 0, $gap);
  width: percentage($col/$sum);
  vertical-align: $align;
}


@mixin generator-grid ($sum:12,$row:'.row',$col:'.col-') {
  #{$row}{
    @include dib-row;
  }
  @for $i from 1 through $sum {
    $left:$sum - $i;
    #{$col}#{$i}{
      @extend .dib-col;
      @include dib-col($i,$sum);
    }
    .offset-#{$left}{
      margin-left: percentage($left/$sum);
    }
  }
}
/*grid End*/

/*line Start*/
@mixin generator-line($inList,$inColor:#ccc,$inPrefix:'.line-') {
  #{$inPrefix} {
    @each $i in $inList {
      &#{$i} {
        height: #{$i}px;
        background-color: $inColor;
        @extend .blank;
      }
    }
  }
}
/*line End*/

/*margin Start*/
$margin-map:(
  m:margin,
  mt:margin-top,
  mr:margin-right,
  mb:margin-bottom,
  ml:margin-left,
  mx:(margin-left,margin-right),
  my:(margin-top,margin-bottom)
);

@mixin generator-margin($inList,$inDirection:'m',$inPrefix:''){
  $mapValue:map_get($margin-map,$inDirection);
  $typeof:type-of($mapValue);


  @if $typeof =='string'{
    .#{$inDirection}#{$inPrefix} {
      @each $i in $inList{
        &#{$i}{
          #{$mapValue}:#{$i}px;
        }
      }
    }
  }@else{
    .#{$inDirection}#{$inPrefix} {
      @each $i in $inList{
        &#{$i}{
          //mapValue is a `list`
          @each $mapItem in $mapValue{
            #{$mapItem}:#{$i}px;
          }
        }
      }
    }
  }
}

@mixin generator-margin-m($inList,$inPrefix:''){
  @include generator-margin($inList,'m',$inPrefix);
}

@mixin generator-margin-mt($inList,$inPrefix:''){
  @include generator-margin($inList,'mt',$inPrefix);
}

@mixin generator-margin-mr($inList,$inPrefix:''){
  @include generator-margin($inList,'mr',$inPrefix);
}

@mixin generator-margin-mb($inList,$inPrefix:''){
  @include generator-margin($inList,'mb',$inPrefix);
}

@mixin generator-margin-ml($inList,$inPrefix:''){
  @include generator-margin($inList,'ml',$inPrefix);
}

@mixin generator-margin-mx($inList,$inPrefix:''){
  @include generator-margin($inList,'mx',$inPrefix);
}

@mixin generator-margin-my($inList,$inPrefix:''){
  @include generator-margin($inList,'my',$inPrefix);
}


/*margin End*/

/*padding Start*/
$padding-map:(
  p:padding,
  pt:padding-top,
  pr:padding-right,
  pb:padding-bottom,
  pl:padding-left,
  px:(padding-left,padding-right),
  py:(padding-top,padding-bottom)
);

@mixin generator-padding($inList,$inDirection:'p',$inPrefix:''){
  $mapValue:map_get($padding-map,$inDirection);
  $typeof:type-of($mapValue);


  @if $typeof =='string'{
    .#{$inDirection}#{$inPrefix} {
      @each $i in $inList{
        &#{$i}{
          #{$mapValue}:#{$i}px;
        }
      }
    }
  }@else{
    .#{$inDirection}#{$inPrefix} {
      @each $i in $inList{
        &#{$i}{
          //mapValue is a `list`
          @each $mapItem in $mapValue{
            #{$mapItem}:#{$i}px;
          }
        }
      }
    }
  }
}

@mixin generator-padding-p($inList,$inPrefix:''){
  @include generator-padding($inList,'p',$inPrefix);
}

@mixin generator-padding-pt($inList,$inPrefix:''){
  @include generator-padding($inList,'pt',$inPrefix);
}

@mixin generator-padding-pr($inList,$inPrefix:''){
  @include generator-padding($inList,'pr',$inPrefix);
}

@mixin generator-padding-pb($inList,$inPrefix:''){
  @include generator-padding($inList,'pb',$inPrefix);
}

@mixin generator-padding-pl($inList,$inPrefix:''){
  @include generator-padding($inList,'pl',$inPrefix);
}

@mixin generator-padding-px($inList,$inPrefix:''){
  @include generator-padding($inList,'px',$inPrefix);
}

@mixin generator-padding-py($inList,$inPrefix:''){
  @include generator-padding($inList,'py',$inPrefix);
}


/*padding End*/

/*width Start*/
@mixin generator-width-w1($inList,$inPrefix:'.w1-') {
  @each $value in $inList{
    #{$inPrefix}#{$value} {
      width: #{100/$value+'%'};
    }
  }
}

@mixin generator-width-wp($inList,$inPrefix:'.wp-') {
  @each $value in $inList{
    #{$inPrefix}#{$value} {
      width: #{$value*10%};
    }
  }
}
/*width End*/
